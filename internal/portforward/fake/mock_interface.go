// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/heptio/developer-dash/internal/portforward (interfaces: PortForwarder)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	portforward "github.com/heptio/developer-dash/internal/portforward"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	reflect "reflect"
)

// MockPortForwarder is a mock of PortForwarder interface
type MockPortForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockPortForwarderMockRecorder
}

// MockPortForwarderMockRecorder is the mock recorder for MockPortForwarder
type MockPortForwarderMockRecorder struct {
	mock *MockPortForwarder
}

// NewMockPortForwarder creates a new mock instance
func NewMockPortForwarder(ctrl *gomock.Controller) *MockPortForwarder {
	mock := &MockPortForwarder{ctrl: ctrl}
	mock.recorder = &MockPortForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortForwarder) EXPECT() *MockPortForwarderMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPortForwarder) Create(arg0 context.Context, arg1 schema.GroupVersionKind, arg2, arg3 string, arg4 uint16) (portforward.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(portforward.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPortForwarderMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPortForwarder)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Find mocks base method
func (m *MockPortForwarder) Find(arg0 string, arg1 schema.GroupVersionKind, arg2 string) (portforward.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2)
	ret0, _ := ret[0].(portforward.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockPortForwarderMockRecorder) Find(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPortForwarder)(nil).Find), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockPortForwarder) Get(arg0 string) (portforward.State, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(portforward.State)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPortForwarderMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPortForwarder)(nil).Get), arg0)
}

// List mocks base method
func (m *MockPortForwarder) List() []portforward.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]portforward.State)
	return ret0
}

// List indicates an expected call of List
func (mr *MockPortForwarderMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPortForwarder)(nil).List))
}

// Stop mocks base method
func (m *MockPortForwarder) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockPortForwarderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPortForwarder)(nil).Stop))
}

// StopForwarder mocks base method
func (m *MockPortForwarder) StopForwarder(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopForwarder", arg0)
}

// StopForwarder indicates an expected call of StopForwarder
func (mr *MockPortForwarderMockRecorder) StopForwarder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopForwarder", reflect.TypeOf((*MockPortForwarder)(nil).StopForwarder), arg0)
}
