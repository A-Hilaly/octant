/*
Copyright (c) 2019 VMware, Inc. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: componentcache.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	componentcache "github.com/heptio/developer-dash/internal/componentcache"
	component "github.com/heptio/developer-dash/pkg/view/component"
	reflect "reflect"
)

// MockComponentCache is a mock of ComponentCache interface
type MockComponentCache struct {
	ctrl     *gomock.Controller
	recorder *MockComponentCacheMockRecorder
}

// MockComponentCacheMockRecorder is the mock recorder for MockComponentCache
type MockComponentCacheMockRecorder struct {
	mock *MockComponentCache
}

// NewMockComponentCache creates a new mock instance
func NewMockComponentCache(ctrl *gomock.Controller) *MockComponentCache {
	mock := &MockComponentCache{ctrl: ctrl}
	mock.recorder = &MockComponentCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentCache) EXPECT() *MockComponentCacheMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockComponentCache) Add(key, value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockComponentCacheMockRecorder) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockComponentCache)(nil).Add), key, value)
}

// Get mocks base method
func (m *MockComponentCache) Get(key interface{}) (component.Component, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(component.Component)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockComponentCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComponentCache)(nil).Get), key)
}

// Update mocks base method
func (m *MockComponentCache) Update(arg0 context.Context, arg1 componentcache.UpdateFn) (component.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(component.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockComponentCacheMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockComponentCache)(nil).Update), arg0, arg1)
}

// Start mocks base method
func (m *MockComponentCache) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start
func (mr *MockComponentCacheMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockComponentCache)(nil).Start), arg0)
}
